summary_glm <- summary(glm_fit)
write.csv(summary_glm, file='/results/glm_fit_summary.csv')
summary_glm
summary_glm <- summary(glm_fit) %>%
as_tibble()
summary(glm_fit)
data.frame(glm_fit$coefficients)
data.frame(glm_fit$coefficients, glm_fit$rank)
glm_fit_s <- data.frame(glm_fit$coefficients, glm_fit$weights)
data.frame(glm_fit$coefficients, glm_fit$weights)
glm_fit_s <- data.frame(glm_fit$coefficients, glm_fit$fitted.values)
write.csv(summary(glm_fit)['coefficients'],file='glm_fit_output.csv')
write.csv(summary(glm_fit)['coefficients'],file='/results/glm_fit_output.csv')
setwd("~/Dropbox (Penn)/__SPRING 2022/STAT401/stat401-rocketleague")
write.csv(summary(glm_fit)['coefficients'],file='/results/glm_fit_output.csv')
setwd("~/Dropbox (Penn)/__SPRING 2022/STAT401/stat401-rocketleague/results")
setwd("~/Dropbox (Penn)/__SPRING 2022/STAT401/stat401-rocketleague/results")
write.csv(summary(glm_fit)['coefficients'],file='glm_fit_output.csv')
setwd("~/Dropbox (Penn)/__SPRING 2022/STAT401/stat401-rocketleague")
write.csv(summary(glm_fit)['coefficients'],file='../results/glm_fit_output.csv')
options(scipen = 0, digits = 3)  # controls number of significant digits printed
library(tidyverse)
library(kableExtra)
glm_fit_output <- read.csv("../results/glm_fit_output.csv")
glm_fit_output
glm_fit_output <- read.csv("../results/glm_fit_output.csv") %>%
select(coefficients.Estimate, coefficients.Pr...z..)
glm_fit_output
glm_fit_output <- read.csv("../results/glm_fit_output.csv") %>%
select(coefficients.Estimate, coefficients.Pr...z..) %>%
rename("Coefficient Estimate" = coefficients.Estimate)
glm_fit_output
read.csv("../results/glm_fit_output.csv")
glm_fit_output <- read.csv("../results/glm_fit_output.csv") %>%
select(X, coefficients.Estimate, coefficients.Pr...z..) %>%
rename("Coefficient Estimate" = coefficients.Estimate)
read.csv("../results/glm_fit_output.csv") %>%
select(X, coefficients.Estimate, coefficients.Pr...z..) %>%
rename("Coefficient Estimate" = coefficients.Estimate) %>%
arrange("coefficients.Pr...z..")
summary(glm_fit)
glm_fit = glm(goal ~ . - idx - distanceToGoal,
family = "binomial" (link = "logit"),
data = shot_train)
summary(glm_fit)
setwd("~/Dropbox (Penn)/__SPRING 2022/STAT401/stat401-rocketleague/results")
write.csv(summary(glm_fit)['coefficients'],file='../results/glm_fit_output.csv')
# misclassification rate
glm_pred = predict(glm_fit, type = "response", newdata = shot_test)
glm_pred_class <- ifelse(glm_pred > 0.5, 1, 0)
glm_misclass = mean(glm_pred_class != shot_test$goal)
glm_misclass
# log loss
library(MLmetrics)
LogLoss(y_pred = glm_pred, y_true = shot_test$goal)
# ROC curve
pred_glm <- prediction(glm_pred, shot_test$goal)
perf_glm <- performance(pred_glm, "tpr", "fpr")
plot(perf_glm)
# apply predictions to full dataset
predictions = predict(glm_fit, type = "response", newdata = clean_shot_data)
data_with_xg = cbind(clean_shot_data, predictions) %>%
rename(xg = predictions)
clean_shot_data
names(clean_shot_data)
glm_fit_output <- read.csv("../results/glm_fit_output.csv") %>%
select(X, coefficients.Estimate, coefficients.Pr...z..) %>%
arrange(coefficients.Pr...z..) %>%
head(10)
glm_fit_output
# top 5 players
head(aggregate)
# top average xg players
total_xg %>%
arrange(desc(sum_xg))
# filter data for top players
data_with_xg %>%
as_tibble() %>%
filter(shot_taker_id == "b9a4d2ec05b")
xg_model_eval <- tribble(
~x, ~y, ~z,
#--|--|----
"a", 2, 3.6,
"b", 1, 8.5
)
xg_model_eval
xg_model_eval <- tribble(
~Model, ~Log Loss,
#--|--|----
"a", 2,
"b", 1
)
xg_model_eval <- tribble(
~Model, ~Log Loss,
#--|--|----
"a", 2,
"b", 1,
)
xg_model_eval <- tribble(
~Model, ~Log Loss,
#--|--|----
"a", 2,
"b", 1,
)
xg_model_eval <- tribble(
~Model, ~Log Loss,
#--|--|----
"a", 2,
"b", 1)
xg_model_eval <- tribble(
~x, ~y,
#--|--|----
"a", 2,
"b", 1
)
xg_model_eval
################################# Excess Goals #################################
# sum all xgs for expected goals
total_xg <- data_with_xg %>%
group_by(shot_taker_id) %>%
summarise(sum_xg = sum(xg))
xg_model_eval <- tribble(
~Model, ~"Log Loss",
#--|--|----
"a", 2,
"b", 1
)
xg_model_eval
LogLoss(y_pred = glm_pred, y_true = shot_test$goal)
glm_losloss_fe <- LogLoss(y_pred = glm_pred, y_true = shot_test$goal)
# log loss
gbm_logloss <- LogLoss(y_pred = gbm_pred, y_true = shot_test_xg$goal)
xg_model_eval <- tribble(
~Model, ~"Log Loss",
#--|--|----
"Logistic Regression, FE, no teammate data", glm_losloss_fe,
"xgBoost, FE, with teammate data", gbm_logloss
)
xg_model_eval
############################# xG Model Evaluation ##############################
# for benchmark, find log loss when just predicting the mean of the training set
xgdata
shot_train_xg
names(shot_train_xg)
avg_goals <- shot_train_xg %>%
summarise(avg_gaol = mean(goal))
avg_goals
avg_goals
avg_goals <- shot_train_xg %>%
summarise(avg_gaol = mean(goal)) %>%
as.numeric()
avg_goals
dim(xgdata)
dim(xgdata)[1,]
dim(xgdata)[[1]]
avg_goals_repped <- rep(avg_goals, dim(xgdata)[[1]])
avg_goals_repped
pred_naive <- cbind(xgdata, avg_goals_repped)
pred_naive
names(pred_naive)
pred_naive <- cbind(shot_test_xg, avg_goals_repped)
avg_goals_repped <- rep(avg_goals, dim(shot_test_xg)[[1]])
pred_naive <- cbind(shot_test_xg, avg_goals_repped)
names(pred_naive)
naive_logloss <- LogLoss(y_pred = avg_goals_repped, y_true = shot_test_xg$goal)
naive_logloss
xg_model_eval <- tribble(
~Model, ~"Log Loss",
#--|--|----
"Logistic Regression, FE, no teammate data", glm_losloss_fe,
"xgBoost, FE, with teammate data", gbm_logloss,
"Naive classifier", naive_logloss
)
xg_model_eval
# sum all xgs for expected goals
total_xg <- data_with_xg %>%
group_by(shot_taker_id) %>%
summarise(sum_xg = sum(xg))
total_xg
data_with_xg
################################# Excess Goals #################################
# using xgboost model with teammate data and engineered features as final model
names(data_with_xg)
total_goals <- data_with_xg %>%
group_by(shot_taker_id) %>%
summarise(total_goals = sum(goal))
total_goals
total_attempts
total_attempts <- data_with_xg %>%
group_by(shot_taker_id) %>%
summarise(count = n())
aggregate <- total_xg %>%
inner_join(total_goals, by = "shot_taker_id") %>%
inner_join(total_attempts, by = "shot_taker_id") %>%
mutate(outperformance = total_goals/(sum_xg)) %>%
mutate(actual_goal_rate = total_goals/count) %>%
arrange(desc(outperformance)) %>%
filter(count>50)
aggregate
# top 5 players
head(aggregate)
# filter data for top players
data_with_xg %>%
as_tibble() %>%
filter(shot_taker_id == "b5568f8827b")
# top average xg players
total_xg %>%
arrange(desc(sum_xg))
# top average xg players
aggregate %>%
arrange(desc(sum_xg))
# top 5 players in terms of excess goals
head(aggregate)
# top 5 players in terms of excess goals
head(aggregate, 5)
# top 5 players in terms of total shots taken
aggregate %>%
arrange(desc(count))
# top 5 players in terms of total shots taken
aggregate %>%
arrange(desc(count)) %>%
head(5)
# top 5 players in terms of excess goals
head(aggregate, 5)
# top average xg players
aggregate %>%
arrange(desc(sum_xg)) %>%
head(5)
# filter data for top players
data_with_xg %>%
as_tibble() %>%
filter(shot_taker_id == "76561198028093603")
summary(glm_fit)
summary(glm_fit)['coefficients']
glm_fit_output
glm_fit_output
glm_fit_output <- read.csv("../results/glm_fit_output.csv")
glm_fit_output
setwd("~/Dropbox (Penn)/__SPRING 2022/STAT401/stat401-rocketleague")
read.csv("../results/glm_fit_output.csv")
glm_fit_output <- read.csv("../results/glm_fit_output.csv") %>%
select(X, coefficients.Estimate, coefficients.Pr...z..) %>%
arrange(coefficients.Pr...z..) %>%
head(10) %>%
select(X, coefficients.Estimate) %>%
rename("Coefficient Estimate" = coefficients.Estimate)
glm_fit_output
glm_fit_output <- read.csv("../results/glm_fit_output.csv") %>%
select(X, coefficients.Estimate, coefficients.Pr...z..) %>%
arrange(coefficients.Pr...z..) %>%
head(10) %>%
select(X, coefficients.Estimate) %>%
rename("Coefficient Estimate" = coefficients.Estimate)
glm_fit_output %>%
kable(format = "latex", row.names = NA,
booktabs = TRUE, digits = 2,
caption = "Subset of Statististically Significant Covariates") %>%
kable_styling(position = "center", latex_options = "HOLD_position")
glm_fit_output <- read.csv("../results/glm_fit_output.csv") %>%
select(X, coefficients.Estimate, coefficients.Pr...z..) %>%
arrange(coefficients.Pr...z..) %>%
head(10) %>%
select(X, coefficients.Estimate) %>%
rename("Coefficient Estimate" = coefficients.Estimate)
glm_fit_output <- read.csv("../results/glm_fit_output.csv") %>%
select(X, coefficients.Estimate, coefficients.Pr...z..) %>%
arrange(coefficients.Pr...z..) %>%
head(10) %>%
select(X, coefficients.Estimate) %>%
rename("Coefficient Estimate" = coefficients.Estimate)
glm_fit_output <- read.csv("/results/glm_fit_output.csv") %>%
select(X, coefficients.Estimate, coefficients.Pr...z..) %>%
arrange(coefficients.Pr...z..) %>%
head(10) %>%
select(X, coefficients.Estimate) %>%
rename("Coefficient Estimate" = coefficients.Estimate)
data_condensed
data_condensed <- read.csv("../results/clean_shot_data.csv") %>%
select(c(goal, ball_pos_x, ball_pos_y, ball_pos_z,
distanceToGoal, shot_taker_pos_x))
data_condensed %>%
kable(format = "latex", row.names = NA,
booktabs = TRUE, digits = 2,
caption = "Subset of Location Features") %>%
kable_styling(position = "center", latex_options = "HOLD_position")
data_condensed
data <- read.csv("../results/clean_shot_data.csv")
data <- read.csv("../results/clean_shot_data.csv") %>%
select(-c(X, idx))
data
names(data) %>%
select(-contains("team_mate_"))
data <- read.csv("../results/clean_shot_data.csv") %>%
select(-c(X, idx)) %>%
select(-contains("team_mate_"))
names(data)
data <- read.csv("../results/clean_shot_data.csv") %>%
select(-c(X, idx)) %>%
select(-contains("_ang_vel_"))
summary(glm_fit)
summary(glm_fit)['coefficients']
data.frame(summary(glm_fit)$coef[summary(glm_fit)$coef[,4] <= .05, 4])
significant_logreg <- data.frame(
summary(glm_fit)$coef[summary(glm_fit)$coef[,4] <= .05, 4])
significant_logreg <- data.frame(
summary(glm_fit)$coef[summary(glm_fit)$coef[,4] <= .05, 4]) %>%
arrange(desc())
significant_logreg <- data.frame(
summary(glm_fit)$coef[summary(glm_fit)$coef[,4] <= .05, 4]) %>%
arrange(desc(summary.glm_fit..coef.summary.glm_fit..coef...4.....0.05..4.))
significant_logreg
significant_logreg <- data.frame(
summary(glm_fit)$coef[summary(glm_fit)$coef[,4] <= .05, 4]) %>%
arrange(summary.glm_fit..coef.summary.glm_fit..coef...4.....0.05..4.)
significant_logreg
significant_logreg <- data.frame(
summary(glm_fit)$coef[summary(glm_fit)$coef[,4] <= .05, 4]) %>%
arrange(summary.glm_fit..coef.summary.glm_fit..coef...4.....0.05..4.) %>%
head(10)
significant_logreg
significant_logreg <- data.frame(
summary(glm_fit)$coef[summary(glm_fit)$coef[,4] <= .05, 4]) %>%
arrange(summary.glm_fit..coef.summary.glm_fit..coef...4.....0.05..4.) %>%
head(10) %>%
select(-c(summary.glm_fit..coef.summary.glm_fit..coef...4.....0.05..4.))
significant_logreg
significant_logreg <- data.frame(
summary(glm_fit)$coef[summary(glm_fit)$coef[,4] <= .05, 4]) %>%
arrange(summary.glm_fit..coef.summary.glm_fit..coef...4.....0.05..4.) %>%
head(10)
significant_logreg
names(significant_logreg)
significant_logreg <- data.frame(
summary(glm_fit)$coef[summary(glm_fit)$coef[,4] <= .05]) %>%
arrange(summary.glm_fit..coef.summary.glm_fit..coef...4.....0.05..4.) %>%
head(10)
significant_logreg <- data.frame(
summary(glm_fit)$coef[summary(glm_fit)$coef[,4] <= .05, 5]) %>%
arrange(summary.glm_fit..coef.summary.glm_fit..coef...4.....0.05..4.) %>%
head(10)
significant_logreg <- data.frame(
summary(glm_fit)$coef[summary(glm_fit)$coef[,4] <= .05, 3]) %>%
arrange(summary.glm_fit..coef.summary.glm_fit..coef...4.....0.05..4.) %>%
head(10)
significant_logreg <- data.frame(
summary(glm_fit)$coef[summary(glm_fit)$coef[,4] <= .05, 4]) %>%
arrange(summary.glm_fit..coef.summary.glm_fit..coef...4.....0.05..4.) %>%
head(10)
names(significant_logreg)
stringr::str_match(rownames(significant_logreg), "\\((.*)\\)")[,2]
write.csv(significant_logreg,file='../results/glm_fit_output.csv')
write.csv(significant_logreg, file='../results/glm_fit_output.csv')
setwd("~/Dropbox (Penn)/__SPRING 2022/STAT401/stat401-rocketleague")
write.csv(significant_logreg, file='../results/glm_fit_output.csv')
write.csv(significant_logreg, file='/results/glm_fit_output.csv')
write.csv(significant_logreg, file='../results/glm_fit_output.csv')
setwd("~/Dropbox (Penn)/__SPRING 2022/STAT401/stat401-rocketleague")
setwd("~/Dropbox (Penn)/__SPRING 2022/STAT401/stat401-rocketleague")
write.csv(significant_logreg, file='../results/glm_fit_output.csv')
save(glm_fit, glm_fit.Rda)
save(glm_fit, file = "glm_fit.rda")
save(glm_fit, file = "../results/glm_fit.rda")
setwd("~/Dropbox (Penn)/__SPRING 2022/STAT401/stat401-rocketleague/results")
setwd("~/Dropbox (Penn)/__SPRING 2022/STAT401/stat401-rocketleague/results")
save(glm_fit, file = "../rglm_fit.rda")
setwd("~/Dropbox (Penn)/__SPRING 2022/STAT401/stat401-rocketleague/results")
save(glm_fit, file = "../glm_fit.rda")
setwd("~/Dropbox (Penn)/__SPRING 2022/STAT401/stat401-rocketleague")
save(glm_fit, file = "../results/glm_fit.rda")
load("glm_fit.rda")
load("../results/glm_fit.rda")
glm_fit <- load("../results/glm_fit.rda")
glm_fit
summary(glm_fit)
glm_fit = glm(goal ~ . - idx - distanceToGoal,
family = "binomial" (link = "logit"),
data = shot_train)
summary(glm_fit)
summary(gbm_fit, n.trees = 200, plotit = FALSE)
importance_matrix = xgb.importance(colnames(shot_train_xg), model = gbm_fit)
save(gbm_fit, file = "gbm_fit.Rda")
load("../results/gbm_fit.Rda")
summary(gbm_fit, n.trees = 200)
summary(gbm_fit, n.trees = 200) %>%
head(10)
summary(gbm_fit, n.trees = 200, plotit = FALSE)
summary(gbm_fit, n.trees = 200, plotit = FALSE) %>%
as.tibble(.name_repair)
data_with_xg
summary(gbm_fit, n.trees = 200, plotit = FALSE)
summary(gbm_fit, n.trees = 200, plotit = FALSE) %>%
as_tibble()
summary(gbm_fit, n.trees = 200, plotit = FALSE) %>%
as_tibble()
boost_feature_importance <- summary(gbm_fit, n.trees = 200, plotit = FALSE) %>%
as_tibble()
boost_feature_importance
boost_feature_importance <- summary(gbm_fit, n.trees = 200, plotit = FALSE) %>%
as_tibble() %>%
head(10)
boost_feature_importance
write.csv(boost_feature_importance, file = "results/boost_feature_importance.csv")
load("../results/gbm_fit.Rda")
data <- read.csv("results/boost_feature_importance.csv") %>%
as_tibble()
load("../results/gbm_fit.Rda")
data <- read.csv("../results/boost_feature_importance.csv") %>%
as_tibble()
data
##################### Feature Engineering w/ Teammate Data #####################
clean_shot_data <- shot_data %>%
select(-c(frame, time, is_orange,
opp_1_id, opp_2_id)) %>%
select(-contains("throttle"), -contains("name"), -contains("_dodge"),
-contains("steer"), -contains("ping"), -contains("cam"),
-contains("handbrake"), -contains("boost"),
-contains("jump")) %>%
add_column(shot_taker_boost_active = shot_data$shot_taker_boost_active) %>%
na.omit()
clean_shot_data$goal <- as.logical(clean_shot_data$goal) %>%
as.numeric()
#log distance
clean_shot_data$logDistanceToGoal <- log(clean_shot_data$distanceToGoal)
#distance between opponents
clean_shot_data <- clean_shot_data %>%
add_column(distanceToOpp1 = ((.$shot_taker_pos_x - .$opp_1_pos_x)^2
+ (.$shot_taker_pos_y - .$opp_1_pos_y)^2
+ (.$shot_taker_pos_z - .$opp_1_pos_z)^2) ^(1/2))
clean_shot_data <- clean_shot_data %>%
add_column(distanceToOpp2 = ((.$shot_taker_pos_x - .$opp_2_pos_x)^2
+ (.$shot_taker_pos_y - .$opp_2_pos_y)^2
+ (.$shot_taker_pos_z - .$opp_2_pos_z)^2) ^(1/2))
# distance to teammate
clean_shot_data <- clean_shot_data %>%
add_column(distanceToTeam = ((.$shot_taker_pos_x - .$team_mate_pos_x)^2
+ (.$shot_taker_pos_y - .$team_mate_pos_y)^2
+ (.$shot_taker_pos_z - .$team_mate_pos_z)^2) ^(1/2))
#### arc cos angle with opponents
# create vectors between ball and opposition players
clean_shot_data <- clean_shot_data %>%
add_column(vector_opp_1_x = (.$ball_pos_x - .$opp_1_pos_x))
clean_shot_data <- clean_shot_data %>%
add_column(vector_opp_1_y = (.$ball_pos_y - .$opp_1_pos_y))
clean_shot_data <- clean_shot_data %>%
add_column(vector_opp_1_z = (.$ball_pos_z - .$opp_1_pos_z))
clean_shot_data <- clean_shot_data %>%
add_column(vector_opp_2_x = (.$ball_pos_x - .$opp_2_pos_x))
clean_shot_data <- clean_shot_data %>%
add_column(vector_opp_2_y = (.$ball_pos_y - .$opp_2_pos_y))
clean_shot_data <- clean_shot_data %>%
add_column(vector_opp_2_z = (.$ball_pos_z - .$opp_2_pos_z))
# calculate dot products of position and velocity vectors
clean_shot_data <- clean_shot_data %>%
add_column(dotproduct_opp_1 = ((.$vector_opp_1_x * .$ball_vel_x)
+ (.$vector_opp_1_y * .$ball_vel_y)
+ (.$vector_opp_1_z * .$ball_vel_z)))
clean_shot_data <- clean_shot_data %>%
add_column(dotproduct_opp_2 = ((.$vector_opp_2_x * .$ball_vel_x)
+ (.$vector_opp_2_y * .$ball_vel_y)
+ (.$vector_opp_2_z * .$ball_vel_z)))
# calculate magnitudes of the vectors
clean_shot_data <- clean_shot_data %>%
add_column(magnitude_vel = ((.$ball_vel_x * .$ball_vel_x)^2
+ (.$ball_vel_y * .$ball_vel_y)^2
+ (.$ball_vel_z * .$ball_vel_z)^2) ^(1/2))
clean_shot_data <- clean_shot_data %>%
add_column(magnitude_opp_1 = ((.$vector_opp_1_x * .$vector_opp_1_x)^2
+ (.$vector_opp_1_y * .$vector_opp_1_y)^2
+ (.$vector_opp_1_z * .$vector_opp_1_z)^2) ^(1/2))
clean_shot_data <- clean_shot_data %>%
add_column(magnitude_opp_2 = ((.$vector_opp_2_x * .$vector_opp_2_x)^2
+ (.$vector_opp_2_y * .$vector_opp_2_y)^2
+ (.$vector_opp_2_z * .$vector_opp_2_z)^2) ^(1/2))
# actual cos theta
clean_shot_data <- clean_shot_data %>%
add_column(cos_theta_opp_1 = .$dotproduct_opp_1 / (.$magnitude_opp_1 * .$magnitude_vel))
clean_shot_data <- clean_shot_data %>%
add_column(cos_theta_opp_2 = .$dotproduct_opp_2 / (.$magnitude_opp_2 * .$magnitude_vel))
# remove the helper columns (vector, dotproduct, magnitude)
clean_shot_data <- clean_shot_data %>%
select(-contains("vector"), -contains("dotproduct"), -contains("magnitude")) %>%
na.omit()
head(clean_shot_data, 5)
# check that cos_theta is all within 1 to -1
# all of these should be equal to 0
sum(clean_shot_data$cos_theta_opp_1 < -1)
sum(clean_shot_data$cos_theta_opp_2 < -1)
sum(clean_shot_data$cos_theta_opp_2 > 1)
sum(clean_shot_data$cos_theta_opp_2 > 1)
names(clean_shot_data)
train_samples1 = sample(1:n1, round(0.8*n1))
train_samples1
#################################### Ridge #####################################
# train / test split
set.seed(5)
shot_train_pen = clean_shot_data[train_samples1,]
shot_test_pen = clean_shot_data[-train_samples1,]
# run ridge regression
ridge_fit = cv.glmnet(goal ~ . -idx,
alpha = 0,
nfolds = 10,
data = shot_train_pen,
show_col_types = FALSE)
#################################### Ridge #####################################
library(glmnetUtils)                              # to run ridge and lasso
source("code/functions/plot_glmnet.R")
# run ridge regression
ridge_fit = cv.glmnet(goal ~ . -idx,
alpha = 0,
nfolds = 10,
data = shot_train_pen,
show_col_types = FALSE)
